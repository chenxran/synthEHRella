import os
import pickle
import argparse
import numpy as np
import pandas as pd
from synthEHRella import DataTransform

def post_processing_ehrdiff(data_path):
    # read testing_output/ehrdiff/samples/all_x.npy
    matrix = np.load(data_path)[:, :1071]
    return matrix

def post_processing_plasmode(data_path):
    base_dir = os.path.dirname(os.path.abspath(__file__))
    with open(f'{base_dir}/utils/processed_mimic3.types', 'rb') as f:
        types = pickle.load(f)

    # matrix = np.zeros((50000, len(types)))
    matrix = []
    for key, value in types.items():
        if os.path.exists(f"{data_path}/event_{key}.csv".format()):
            data = pd.read_csv(f"{data_path}/event_{key}.csv".format())
            matrix.append(np.array(data.iloc[:, 0].tolist()).astype(np.float64))  # data.sample(50000, replace=True).values.flatten().astype(int)
        else:
            print(f"Not exists {key}")
    matrix = np.array(matrix).T

    return matrix

def post_processing(data_path, method):
    print("Post-processing the synthetic data generated by {}...".format(method))
    transform = DataTransform()

    if method == 'synthea':
        matrix = transform.snomedtophecode(data_path)
        matrix = transform.phecodextophecodexm(matrix)
    else:
        if method == 'ehrdiff':
            matrix = post_processing_ehrdiff(data_path)
        elif method == 'plasmode':
            matrix = post_processing_plasmode(data_path)
        else:
            matrix = np.load(data_path, allow_pickle=True)
        
        matrix = transform.icd9tophecode(matrix)
        matrix = transform.phecodextophecodexm(matrix)  # merge to higher hierarchy
    
    return matrix


if __name__ == '__main__':
    # setup arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('method', help='The generation method (e.g., corgan, plasmode, synthea)')
    parser.add_argument('--data_path', required=True, help='Path to the synthetic data')
    parser.add_argument('--output_path', required=True, help='Path to save the post-processed synthetic data')
    args = parser.parse_args()
    
    # post-processing
    matrix = post_processing(args.data_path, args.method)
    
    # save the post-processed synthetic data
    np.save(args.output_path, matrix)